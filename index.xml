<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Zisis Tachtsidis</title>
    <link>https://zztach.github.io/</link>
    <description>Recent content on Zisis Tachtsidis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>zistach@runbox.com (Zisis Tachtsidis)</managingEditor>
    <webMaster>zistach@runbox.com (Zisis Tachtsidis)</webMaster>
    <copyright>©2022, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 31 Jan 2022 21:45:06 +0900</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://zztach.github.io/index.xml" rel="self" type="application/rss+xml" />
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>The Unseen Glue</title>
        <link>https://zztach.github.io/posts/06_the_unseen_glue/</link>
        <pubDate>Mon, 31 Jan 2022 21:45:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Mon, 31 Jan 2022 21:45:06 +0900</atom:modified>
        <guid>https://zztach.github.io/posts/06_the_unseen_glue/</guid>
        <description>Introduction There&amp;rsquo;s a lot of talk since the COVID-19 outbreak around remote work. Some argue that they are more productive while others have reached to a burn-out point. The reality is that every one of us is different and values different things. Some people do miss human interaction, while for others the fact that they don&amp;rsquo;t have to come close to another human being again is godsend.
But how could face-to-face human interaction - or the lack of it - affect a team?</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://zztach.github.ioimages/article-icons/1-stand.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>empathy</category>
            
          
            
              <category>remote</category>
            
          
        
        
          
            
              <category>Team work</category>
            
          
        
        
          
            
              <category>Human Factor</category>
            
          
        
      </item>
      
      <item>
        <title>Fault tolerant services</title>
        <link>https://zztach.github.io/posts/05_fault_tolerance/</link>
        <pubDate>Fri, 28 Jan 2022 21:45:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Fri, 28 Jan 2022 21:45:06 +0900</atom:modified>
        <guid>https://zztach.github.io/posts/05_fault_tolerance/</guid>
        <description>Introduction We live in a software world where distributed applications are common. They usually include lots of independently deployed services that communicate with each other. Sure, there are many benefits from this approach, but it goes without saying that it also introduces some new problems that need our attention.
One of those is fault tolerance. For example, what happens when one of the services degrades in performance? If you don&amp;rsquo;t take any measures the application that makes the calls to that &amp;ldquo;problematic&amp;rdquo; service will start experiencing long timeouts and might even go down if threads accumulate while waiting for a response.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://zztach.github.ioimages/article-icons/1-solid.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>java</category>
            
          
            
              <category>concurrency</category>
            
          
            
              <category>distributed</category>
            
          
        
        
          
            
              <category>Robustness</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>Keeping your threads under control</title>
        <link>https://zztach.github.io/posts/04_be_gentle_to_interruptions/</link>
        <pubDate>Wed, 26 Jan 2022 21:45:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Wed, 26 Jan 2022 21:45:06 +0900</atom:modified>
        <guid>https://zztach.github.io/posts/04_be_gentle_to_interruptions/</guid>
        <description>Introduction We are so spoiled by Java&amp;rsquo;s concurrency utilities that it&amp;rsquo;s easy to ignore some basic error handling like what happens when some of the threads we have created &amp;ldquo;go wild&amp;rdquo;.
It&amp;rsquo;s like getting on a fast motorcycle for the first time. Thrilled by the idea of speed you roll on the throttle reaching &amp;gt;200Km/h in no time but then a car crops up out of nowhere. It&amp;rsquo;s only then that you realize you have no idea how to apply the brakes.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://zztach.github.ioimages/article-icons/1-control.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>java</category>
            
          
            
              <category>concurrency</category>
            
          
        
        
          
            
              <category>Robustness</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>SolrCloud performance tuning</title>
        <link>https://zztach.github.io/posts/03_solr_performance/</link>
        <pubDate>Sun, 11 Mar 2018 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Sun, 11 Mar 2018 12:00:06 +0900</atom:modified>
        <guid>https://zztach.github.io/posts/03_solr_performance/</guid>
        <description>Introduction In this post we’ll focus on SolrCloud stability and search performance. Most of the lessons have been learned the hard way, fighting them on production some times. The list is nowhere complete and rest assured that there are more Solr performance related storied to tell. Take notte that the ones discussed below are not covered in great detail as it&amp;rsquo;d make a very long post. Some of them are even worth their own individual post.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://zztach.github.ioimages/article-icons/1-performance.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>solrcloud</category>
            
          
            
              <category>lucene</category>
            
          
            
              <category>java</category>
            
          
            
              <category>performance</category>
            
          
            
              <category>distributed</category>
            
          
        
        
          
            
              <category>Performance</category>
            
          
            
              <category>Robustness</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>MacOS X and OpenGL</title>
        <link>https://zztach.github.io/posts/02_mac_opengl/</link>
        <pubDate>Wed, 13 Mar 2013 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Wed, 13 Mar 2013 12:00:06 +0900</atom:modified>
        <guid>https://zztach.github.io/posts/02_mac_opengl/</guid>
        <description>Introduction Here is a guide on configuring an SFML, OpenGL, C++ project under Netbeans in MacOS X. I couldn’t find any similar guide on the net and I encountered some caveats and intricacies while trying to set it up. The lack of a complete guide alone made it worth blogging about.
First of all, I assume that NetBeans and SFML are already installed on your machine. If not, please go to the corresponding product’s official site and follow the guides there.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://zztach.github.ioimages/article-icons/1-task.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>opengl</category>
            
          
            
              <category>c&#43;&#43;</category>
            
          
            
              <category>mac</category>
            
          
        
        
          
            
              <category>Setup</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>Spring AOP &amp; Bean Naming conflict</title>
        <link>https://zztach.github.io/posts/01_spring-aop-bug/</link>
        <pubDate>Wed, 14 Sep 2011 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Wed, 14 Sep 2011 12:00:06 +0900</atom:modified>
        <guid>https://zztach.github.io/posts/01_spring-aop-bug/</guid>
        <description>Spring AOP fun! My everyday life at work involves dealing with several Java frameworks such as Spring, Hibernate and JSF among others. Most frameworks Take Spring for example. IT removes a lot of burden from the developer and gets you up to speed fast but in order to achieve this it makes a lot of conventions. This is not bad per-se but it can turn into an ugly beast at times - notably for the uninitiated - when trying to decipher what is wrong in your application.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://zztach.github.ioimages/article-icons/1-bug.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>spring</category>
            
          
            
              <category>java</category>
            
          
            
              <category>aop</category>
            
          
        
        
          
            
              <category>Interesting Bug</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
