<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Posts on Zisis Tachtsidis</title>
    <link>https://zisistach.org/posts/</link>
    <description>Recent content in Posts on Zisis Tachtsidis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>zistach@runbox.com (Zisis Tachtsidis)</managingEditor>
    <webMaster>zistach@runbox.com (Zisis Tachtsidis)</webMaster>
    <copyright>©2022, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 11 Mar 2018 12:00:06 +0900</lastBuildDate>
    
        <atom:link href="https://zisistach.org/posts/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>SolrCloud performance tuning</title>
        <link>https://zisistach.org/posts/03_solr_performance/</link>
        <pubDate>Sun, 11 Mar 2018 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Sun, 11 Mar 2018 12:00:06 +0900</atom:modified>
        <guid>https://zisistach.org/posts/03_solr_performance/</guid>
        <description>Introduction Most of the recommendations presented below are coming directly from the web (StackOverflow, Solr wiki, Solr Jira, Solr mailing list), while some others required a lot of testing and debugging in order to understand them and reach a solution. It’s also nowhere complete but I hope it can give some directions to people facing performance issues with Solr. In this post we’ll focus on SolrCloud stability and search performance. There are even more Solr performance related storied to tell.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://zisistach.orgimages/article-icons/1-performance.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>solrcloud</category>
            
          
            
              <category>lucene</category>
            
          
            
              <category>java</category>
            
          
            
              <category>performance</category>
            
          
        
        
          
            
              <category>Performance</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>MacOS X and OpenGL</title>
        <link>https://zisistach.org/posts/02_mac_opengl/</link>
        <pubDate>Wed, 13 Mar 2013 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Wed, 13 Mar 2013 12:00:06 +0900</atom:modified>
        <guid>https://zisistach.org/posts/02_mac_opengl/</guid>
        <description>Introduction Here is a guide on configuring an SFML, OpenGL, C++ project under Netbeans in MacOS X. I couldn’t find any similar guide on the net and I encountered some caveats and intricacies while trying to set it up. The lack of a complete guide alone made it worth blogging about.
First of all, I assume that NetBeans and SFML are already installed on your machine. If not, please go to the corresponding product’s official site and follow the guides there.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://zisistach.orgimages/article-icons/1-task.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>opengl</category>
            
          
            
              <category>c&#43;&#43;</category>
            
          
            
              <category>mac</category>
            
          
        
        
          
            
              <category>Setup</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>Spring AOP &amp; Bean Naming. Is it a bug?</title>
        <link>https://zisistach.org/posts/01_spring-aop-bug/</link>
        <pubDate>Wed, 14 Sep 2011 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Wed, 14 Sep 2011 12:00:06 +0900</atom:modified>
        <guid>https://zisistach.org/posts/01_spring-aop-bug/</guid>
        <description>Spring aop fun! My everyday life at work involves dealing with several Java frameworks such as Spring, Hibernate and JSF amongst others. Some of them are quite easy to grasp while others have a steeper learning curve (Hibernate raises its hand here), especially when it comes to making it performant.
Lately, I’ve been trying to extend the use of AOP in our project and use it for a quite common purpose, to measure the performance of our app.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://zisistach.orgimages/article-icons/1-bug.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>spring</category>
            
          
            
              <category>aop</category>
            
          
        
        
          
            
              <category>Interesting Bug</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
