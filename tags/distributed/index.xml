<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>distributed on Zisis Tachtsidis</title>
    <link>https://www.zisistach.org/tags/distributed/</link>
    <description>Recent content in distributed on Zisis Tachtsidis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>zistach@runbox.com (Zisis Tachtsidis)</managingEditor>
    <webMaster>zistach@runbox.com (Zisis Tachtsidis)</webMaster>
    <copyright>©2022, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 28 Jan 2022 21:45:06 +0900</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://www.zisistach.org/tags/distributed/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Fault tolerant services</title>
        <link>https://www.zisistach.org/posts/fault-tolerance/</link>
        <pubDate>Fri, 28 Jan 2022 21:45:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Fri, 28 Jan 2022 21:45:06 +0900</atom:modified>
        <guid>https://www.zisistach.org/posts/fault-tolerance/</guid>
        <description>Introduction We live in a software world where distributed applications are common. They usually include lots of independently deployed services that communicate with each other. Sure, there are many benefits from this approach, but it goes without saying that it also introduces some new problems that need our attention.
One of those is fault tolerance. For example, what happens when one of the services degrades in performance? If you don&amp;rsquo;t take any measures the application that makes the calls to that &amp;ldquo;problematic&amp;rdquo; service will start experiencing long timeouts and might even go down if threads accumulate while waiting for a response.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://www.zisistach.orgimages/article-icons/1-solid.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>java</category>
            
          
            
              <category>concurrency</category>
            
          
            
              <category>distributed</category>
            
          
        
        
          
            
              <category>Robustness</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>SolrCloud performance tuning</title>
        <link>https://www.zisistach.org/posts/solr-performance/</link>
        <pubDate>Sun, 11 Mar 2018 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Sun, 11 Mar 2018 12:00:06 +0900</atom:modified>
        <guid>https://www.zisistach.org/posts/solr-performance/</guid>
        <description>Introduction In this post we’ll focus on SolrCloud stability and search performance. Most of the lessons have been learned the hard way, fighting them on production. The list is nowhere complete and rest assured that there are more Solr performance related storied to tell. Take note that the ones discussed below are not covered in great detail as it&amp;rsquo;d make a very long post. Some of them are even worth their own individual post.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://www.zisistach.orgimages/article-icons/1-performance.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>solrcloud</category>
            
          
            
              <category>lucene</category>
            
          
            
              <category>java</category>
            
          
            
              <category>performance</category>
            
          
            
              <category>distributed</category>
            
          
        
        
          
            
              <category>Performance</category>
            
          
            
              <category>Robustness</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
