<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>java on Zisis Tachtsidis</title>
    <link>https://www.zisistach.org/tags/java/</link>
    <description>Recent content in java on Zisis Tachtsidis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>zistach@runbox.com (Zisis Tachtsidis)</managingEditor>
    <webMaster>zistach@runbox.com (Zisis Tachtsidis)</webMaster>
    <copyright>©2022, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 15 Feb 2022 12:00:06 +0900</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://www.zisistach.org/tags/java/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Solr Function queries</title>
        <link>https://www.zisistach.org/posts/solr-function-playground/</link>
        <pubDate>Tue, 15 Feb 2022 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Tue, 15 Feb 2022 12:00:06 +0900</atom:modified>
        <guid>https://www.zisistach.org/posts/solr-function-playground/</guid>
        <description>Introduction One of the most interesting Solr features is definitely &amp;ldquo;Function Queries&amp;rdquo;. They allow you to dynamically alter the ranking of your documents, by applying functions on existing index fields. More details and a complete list of the available functions are documented at https://solr.apache.org/guide/8_9/function-queries.html
Use case - Boost recent documents A pretty common requirement on search ranking is to combine the absolute relevancy of results (name it tf/idf, BM25 or whatever) with a boost on most recent documents.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://www.zisistach.orgimages/article-icons/1-function.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>solrcloud</category>
            
          
            
              <category>solr</category>
            
          
            
              <category>lucene</category>
            
          
            
              <category>java</category>
            
          
            
              <category>function-queries</category>
            
          
            
              <category>ranking</category>
            
          
        
        
          
            
              <category>Feature</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>Fault tolerant services</title>
        <link>https://www.zisistach.org/posts/fault-tolerance/</link>
        <pubDate>Fri, 28 Jan 2022 21:45:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Fri, 28 Jan 2022 21:45:06 +0900</atom:modified>
        <guid>https://www.zisistach.org/posts/fault-tolerance/</guid>
        <description>Introduction We live in a software world where distributed applications are common. They usually include lots of independently deployed services that communicate with each other. Sure, there are many benefits from this approach, but it goes without saying that it also introduces some new problems that need our attention.
One of those is fault tolerance. For example, what happens when one of the services degrades in performance? If you don&amp;rsquo;t take any measures the application that makes the calls to that &amp;ldquo;problematic&amp;rdquo; service will start experiencing long timeouts and might even go down if threads accumulate while waiting for a response.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://www.zisistach.orgimages/article-icons/1-solid.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>java</category>
            
          
            
              <category>concurrency</category>
            
          
            
              <category>distributed</category>
            
          
        
        
          
            
              <category>Robustness</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>Keeping your threads under control</title>
        <link>https://www.zisistach.org/posts/be-gentle-to-interruptions/</link>
        <pubDate>Wed, 26 Jan 2022 21:45:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Wed, 26 Jan 2022 21:45:06 +0900</atom:modified>
        <guid>https://www.zisistach.org/posts/be-gentle-to-interruptions/</guid>
        <description>Introduction We are so spoiled by Java&amp;rsquo;s concurrency utilities that it&amp;rsquo;s easy to ignore some basic error handling like what happens when some of the threads we have created &amp;ldquo;go wild&amp;rdquo;.
It&amp;rsquo;s like getting on a fast motorcycle for the first time. Thrilled by the idea of speed you roll on the throttle reaching &amp;gt;200Km/h in no time but then a car crops up out of nowhere. It&amp;rsquo;s only then that you realize you have no idea how to apply the brakes.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://www.zisistach.orgimages/article-icons/1-control.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>java</category>
            
          
            
              <category>concurrency</category>
            
          
        
        
          
            
              <category>Robustness</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>SolrCloud performance tuning</title>
        <link>https://www.zisistach.org/posts/solr-performance/</link>
        <pubDate>Sun, 11 Mar 2018 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Sun, 11 Mar 2018 12:00:06 +0900</atom:modified>
        <guid>https://www.zisistach.org/posts/solr-performance/</guid>
        <description>Introduction In this post we’ll focus on SolrCloud stability and search performance. Most of the lessons have been learned the hard way, fighting them on production. The list is nowhere complete and rest assured that there are more Solr performance related storied to tell. Take note that the ones discussed below are not covered in great detail as it&amp;rsquo;d make a very long post. Some of them are even worth their own individual post.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://www.zisistach.orgimages/article-icons/1-performance.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>solrcloud</category>
            
          
            
              <category>lucene</category>
            
          
            
              <category>java</category>
            
          
            
              <category>performance</category>
            
          
            
              <category>distributed</category>
            
          
        
        
          
            
              <category>Performance</category>
            
          
            
              <category>Robustness</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      
      <item>
        <title>Spring AOP &amp; Bean Naming conflict</title>
        <link>https://www.zisistach.org/posts/spring-aop-bug/</link>
        <pubDate>Wed, 14 Sep 2011 12:00:06 +0900</pubDate>
        <author>zistach@runbox.com (Zisis Tachtsidis)</author>
        <atom:modified>Wed, 14 Sep 2011 12:00:06 +0900</atom:modified>
        <guid>https://www.zisistach.org/posts/spring-aop-bug/</guid>
        <description>Spring AOP fun! My everyday life at work involves dealing with several Java frameworks such as Spring, Hibernate and JSF among others. Most frameworks Take Spring for example. IT removes a lot of burden from the developer and gets you up to speed fast but in order to achieve this it makes a lot of conventions. This is not bad per-se but it can turn into an ugly beast at times - notably for the uninitiated - when trying to decipher what is wrong in your application.</description>
        
        <dc:creator>Zisis</dc:creator>
        <media:content url="https://www.zisistach.orgimages/article-icons/1-bug.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>spring</category>
            
          
            
              <category>java</category>
            
          
            
              <category>aop</category>
            
          
        
        
          
            
              <category>Interesting Bug</category>
            
          
        
        
          
            
              <category>Software</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
